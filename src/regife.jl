
##############################################################################
##
## Fit is the only exported function
##
##############################################################################


function regife(df::AbstractDataFrame, m::Model; kwargs...)
    regife(df, m.f; m.dict..., kwargs...)
end

function regife(df::AbstractDataFrame, f::FormulaTerm;
             ife::Union{Symbol, Expr, Nothing} = nothing, 
             fe::Union{Symbol, Expr, Nothing} = nothing, 
             vcov::Union{Symbol, Expr, Nothing} = :(simple()), 
             weights::Union{Symbol, Expr, Nothing} = nothing, 
             subset::Union{Symbol, Expr, Nothing} = nothing, 
             method::Symbol = :dogleg, 
             lambda::Number = 0.0, 
             maxiter::Integer = 10_000, 
             tol::Real = 1e-9, 
             save::Union{Bool, Nothing} = nothing,
             contrasts::Dict = Dict{Symbol, Any}())

    ##############################################################################
    ##
    ## Transform DataFrame -> Matrix
    ##
    ##############################################################################

    if isa(vcov, Symbol)
        vcovformula = VcovFormula(Val{vcov})
    else 
        vcovformula = VcovFormula(Val{vcov.args[1]}, (vcov.args[i] for i in 2:length(vcov.args))...)
    end
    m = InteractiveFixedEffectFormula(ife)

    if  (ConstantTerm(0) ∉ FixedEffectModels.eachterm(f.rhs)) & (ConstantTerm(1) ∉ FixedEffectModels.eachterm(f.rhs))
        f = FormulaTerm(f.lhs, tuple(ConstantTerm(1), FixedEffectModels.eachterm(f.rhs)...))
    end
    formula, formula_endo, formula_iv = FixedEffectModels.decompose_iv(f)
    ## parse formula 
    if formula_iv != nothing
        error("partial_out does not support instrumental variables")
    end
    has_absorb = fe != nothing
    has_weights = (weights != nothing)


    ## create a dataframe without missing values & negative weightss
    vars = allvars(formula)
    absorb_vars = allvars(fe)
    vcov_vars = allvars(vcovformula)
    factor_vars = vcat(allvars(m.id), allvars(m.time))
    rem = setdiff(absorb_vars, factor_vars)
    if length(rem) > 0
        error("The categorical variable $(rem[1]) appears in @fe but does not appear in @ife. Simply add it in @formula instead")
    end
    all_vars = unique(vcat(vars, absorb_vars, factor_vars, vcov_vars))
    esample = completecases(df[!, all_vars])
    if has_weights
        esample .&= isnaorneg(df[!, weights])
        all_vars = unique(vcat(all_vars, weights))
    end
    if subset != nothing
        subset = eval(evaluate_subset(df, subset))
        if length(subset) != size(df, 1)
            error("df has $(size(df, 1)) rows but the subset vector has $(length(subset)) elements")
        end
        esample .&= subset
    end
    main_vars = unique(vcat(vars, factor_vars))


    # Compute data needed for errors
    vcov_method_data = VcovMethod(df[esample, unique(Symbol.(vcov_vars))], vcovformula)

     # Compute weights
     sqrtw = get_weights(df, esample, weights)

    ## Compute factors, an array of AbtractFixedEffects
    if has_absorb
        feformula = @eval(@formula(nothing ~ $(fe)))
        fes, ids = FixedEffectModels.parse_fixedeffect(df, feformula)
        if any([isa(fe.interaction, Ones) for fe in fes])
                formula = FormulaTerm(formula.lhs, tuple(ConstantTerm(0), (t for t in FixedEffectModels.eachterm(formula.rhs) if t!= ConstantTerm(1))...))
                has_absorb_intercept = true
        end
        fes = FixedEffect[FixedEffectModels._subset(fe, esample) for fe in fes]
        pfe = FixedEffectModels.FixedEffectMatrix(fes, sqrtw, Val{:lsmr})
    end

    has_intercept = ConstantTerm(1) ∈ FixedEffectModels.eachterm(formula.rhs)


    iterations = 0
    converged = false
    # get two dimensions

    if isa(m.id, Symbol)
        # always factorize
        id = group(df[esample, m.id])
    else
        factorvars, interactionvars = _split(df, allvars(m.id))
        id = group((df[esample, v] for v in factorvars)...)
    end
    if isa(m.time, Symbol)
        # always factorize
        time = group(df[esample, m.time])
    else
        factorvars, interactionvars = _split(df, allvars(m.time))
        time = group((df[esample, v] for v in factorvars)...)
    end

    ##############################################################################
    ##
    ## Construict vector y and matrix X
    ##
    ##############################################################################
    subdf = columntable(df[esample, unique(vcat(vars))])

    formula_schema = apply_schema(formula, schema(formula, subdf, contrasts), StatisticalModel)

    y = convert(Vector{Float64}, response(formula_schema, subdf))
    y .= y .* sqrtw
    oldy = copy(y)
    X = convert(Matrix{Float64}, modelmatrix(formula_schema, subdf))
    X .= X .* sqrtw

    # change default if has_regressors
    has_regressors = size(X, 2) > 0
    if save == nothing 
        save = !has_regressors
    end



    # Compute demeaned X
    yname, coef_names = coefnames(formula_schema)
    if !isa(coef_names, Vector)
        coef_names = [coef_names]
    end
    yname = Symbol(yname)
    coef_names = Symbol.(coef_names)



    if has_absorb
        FixedEffectModels.solve_residuals!(y, pfe)
        FixedEffectModels.solve_residuals!(X, pfe)
     end

 

    ##############################################################################
    ##
    ## Estimate Model on Matrix
    ##
    ##############################################################################

    # initialize factor models at 0.1
    idpool = fill(0.1, length(id.pool), m.rank)
    timepool = fill(0.1, length(time.pool), m.rank)
  
    if !has_regressors
        fp = FactorModel(y, sqrtw, id.refs, time.refs, m.rank)
        fs = FactorSolution(idpool, timepool)
        # factor model 

        (fs, iterations, converged) = 
            fit!(Val{method}, fp, fs; maxiter = maxiter, tol = tol, lambda = lambda)
    else 
        # interactive fixed effect
        # initialize fs
        coef = X \ y
        fp = FactorModel(y - X * coef, sqrtw, id.refs, time.refs, m.rank)
        fs = FactorSolution(idpool, timepool)
        #  [-15.7625, -10.2637, -9.2758, -11.8658, -13.5619, -16.6351, -13.8112, -11.3798, -7.5967, -8.15924, -8.72573, -6.53847, -3.98856, -1.90881, -2.29228, 3.36609, 3.11678, 5.19089, 6.85177, 5.39427, 7.39836, 4.62889, 10.6215, 12.0225, 13.1523, 9.97732, 4.8832, 16.1458, 14.4254, 24.5904, 6.30618, 5.11173, 5.41659, -0.359924, 1.50157, 1.96738, 5.41324, 7.37525, -1.88571, 7.14328, 9.05303, 10.1979, 3.3714, -1.15215, -3.1441, -0.494196, 4.33604, 5.07461, -8.84736, -3.92201, -5.96523, -3.03491, -0.928631, 3.70268, 5.11553, -4.83214, -4.27048, -17.1413, -8.61482, -16.4934, -16.1617, -13.9392, -18.4598, -18.8311, -15.6273, -14.297, -15.3578, -12.1891, -11.2908, -11.5705, -8.53531, -10.5989, -6.88286, -6.63017, -2.24422, 1.02097, 1.7886, 6.60341, 3.34074, 4.44584, 8.33134, 9.60236, 13.2155, 14.2096, 16.5427, 17.1795, 15.2769, 14.76, 17.4396, 38.8587, 18.8464, 18.0605, 17.4314, 12.1144, 10.7522, 9.13636, 10.0773, 11.0409, 4.8376, 1.72589, 0.476349, 0.748318, -0.23566, -2.29826, -4.09702, 0.459497, -2.71523, -6.0936, -6.66309, -8.5427, -7.47084, -9.03535, -12.0747, -12.9705, -19.876, -18.6801, -23.781, 2.22665, 11.3056, 5.2948, 23.9, 14.9818, 16.6951, 14.0306, 15.3107, 12.8156, 15.331, 0.955446, -3.04456, -9.38189, -13.7907, -12.8272, -17.6044, -17.5839, -13.7742, -15.6599, -13.3245, -13.752, -4.77603, -6.13188, -3.33792, 8.06679, 7.69683, 0.350446, 1.24305, -1.41164, 0.566968, 13.18, -0.233368, 1.50973, 10.8687, 18.9912, 16.8876, 9.17557, 4.84554, 12.5436, 23.4998, 9.8531, 13.2684, 6.32774, 1.8189, -5.56161, -12.1642, -8.75054, -7.67307, -3.54527, -7.92847, -8.54754, -6.50174, -1.83734, -5.22127, -7.36202, -3.0202, -2.80749, -1.64546, -3.02391, -10.4891, -7.59425, -19.2926, -5.11412, 75.3372, 67.4766, 76.7815, 123.848, 79.5547, 53.8511, 42.3327, 31.4201, 43.2878, 46.2524, 33.7706, 4.50022, -2.75835, -8.98892, -36.4997, -39.9956, -42.8313, -38.6454, -36.3911, -35.6216, -38.1005, -31.1787, -36.0197, -36.0037, -40.8958, -47.4929, -40.6246, -56.9549, -68.2276, -41.1818, -0.570793, -6.18569, -2.69777, -4.50632, -3.69399, -5.5536, -3.52654, 0.737123, -4.71702, -4.29154, 0.809747, 0.771591, -4.17003, -7.75639, -5.91445, 0.00136621, 1.72499, 5.05674, -1.52288, -1.41943, -0.598394, -0.364561, 0.0485358, 6.22385, 10.0537, 8.92768, 6.15215, 3.66416, 11.7872, 1.53065, -11.5442, -8.89624, -11.4203, -12.7797, -10.8081, -10.8677, -6.25218, -5.36641, -3.1189, -2.11552, 0.162004, -0.13545, -3.40414, -3.25827, -0.480793, 2.19453, 4.16215, 6.24308, 3.88888, 3.40762, 5.39477, 5.25236, 7.58074, 13.2391, 13.4978, 7.99914, 8.15399, 5.6321, 1.06252, 2.5769, -7.3196, -10.0039, -7.34142, -9.61608, -6.39528, -3.84642, -2.41565, 0.922599, 1.6261, 13.5059, 9.87663, 11.3232, 6.77143, 4.41565, 6.7202, 5.25481, 3.69186, -1.37122, -3.06778, -2.17796, -0.177179, -1.27227, 1.29662, -4.94646, -2.99972, -3.49366, -4.06588, 6.02587, -2.0809, 1.16054, 12.9345, 14.8485, 14.3873, 14.8752, 11.6791, 8.1329, 5.53826, 6.14077, 1.76121, -2.52508, -7.85087, -3.57208, -4.83912, -5.31019, -5.58354, -2.90822, -2.41518, -2.89189, -5.36304, -6.23418, -4.33856, -5.10472, -4.20526, 0.347952, -4.05448, -3.43293, -4.26776, -8.89149, -5.95942, -0.897729, -2.03071, -1.79809, -2.91017, -5.40694, -3.28614, -3.33893, -4.80816, -2.65462, -1.39864, 2.99812, 8.08246, 9.22055, 9.66033, 9.4876, 16.9905, -0.578401, -0.359945, -4.90608, -1.95016, -0.995887, -1.65109, -2.95796, -5.95499, -3.18629, -3.89885, 0.0328263, 1.89118, 0.530255, -1.91557, -2.90616, -3.02979, -3.90564, 0.499222, -5.83824, -0.808978, -0.956807, -2.54298, -0.621672, -5.03346, -6.17409, -7.12363, -4.41096, -2.37118, -2.41002, -0.532547, 1.04277, -0.39807, -1.24256, 6.24394, -3.71211, 0.383513, -0.340299, 0.182923, -4.10602, 2.07275, 2.82653, 12.5337, 8.45433, 9.67628, 11.6431, -0.643651, -2.76351, -5.56381, -11.3945, -12.2567, -12.1502, -9.39403, 3.2188, -8.06261, -5.79973, -3.20692, -3.02813, -0.262939, 1.72529, 2.59429, 1.01031, 2.20336, 2.85205, 5.74537, 4.77258, 6.9275, 9.80183, 6.45047, 1.37846, 5.48946, 7.63808, 7.4421, 5.3694, -4.00846, 3.91584, -44.9575, -40.5842, -41.5386, -38.3556, -33.6348, -29.0368, -24.7382, -14.3508, -9.8779, 0.735802, 21.0863, 28.365, 36.1709, 40.4575, 38.9757, 33.4917, 25.3678, 25.0657, 19.1945, 21.9573, 15.9597, 1.4105, 0.438884, -0.28229, -7.51344, -7.33074, -5.8978, 7.84127, -5.31302, -13.1069, -10.7086, -8.01153, -6.40666, -6.86603, -5.84358, -7.77096, -8.26395, -7.70194, -3.55794, -3.12729, -3.98531, -3.13875, -1.25662, 2.32314, 2.63285, 5.41664, 5.46898, 8.46685, 7.85335, 10.4839, 4.11171, 3.7472, 8.78716, 2.52714, 7.4398, -1.38763, -4.67844, -2.96313, 2.6927, 13.717, -1.86181, -0.0562571, -0.0344505, -3.7651, -3.01042, -1.8785, -0.720661, -2.95369, -2.56548, -2.16541, -3.35731, -2.58699, -3.41849, -2.28956, -1.46291, -4.38078, -10.8165, -7.08304, -8.78642, -6.43215, -5.945, 1.73615, -5.4931, -3.29423, 7.76264, 10.1757, 17.1169, 19.2864, 9.81534, 18.4651, 1.60844, 4.13093, 0.16803, -1.84051, -0.743478, 0.571501, 0.9938, 3.73205, 3.48803, 4.26785, 7.30302, 11.1479, 11.7148, 3.33172, 4.33626, 0.216743, 1.97074, -0.216103, 6.84829, -1.75322, -2.00161, -4.02542, -2.62762, -3.99445, -3.06466, -3.75839, -4.98991, -8.8932, -9.90699, -18.0145, 13.1366, 12.7676, 8.45552, 4.04181, 4.55744, 3.67242, 5.30319, 4.37016, -2.1908, -6.09589, -4.94543, -5.71747, -5.30145, -12.3659, -11.4324, -10.6164, -10.481, -8.01538, -6.12888, -4.73225, -3.18746, 0.37675, 4.65927, 5.78892, 5.48318, 9.48428, 13.461, 2.62241, 1.77639, -8.74623, -4.97032, -3.43089, 0.606207, 1.51461, 1.37776, 3.03509, 2.16586, -1.20436, -2.918, -2.57889, -2.21149, -0.332699, -3.49974, -5.04539, -3.26957, -1.2519, 0.825858, 0.140671, -3.06601, -4.16257, 0.753105, 4.32929, 3.10003, 3.25179, 0.546052, 5.21327, 5.26481, 4.92764, -4.85703, 5.74681, -4.49553, -8.17985, -5.68346, -6.40895, -2.96274, -2.02234, -3.27463, -4.96365, 3.0415, -16.8551, -8.57078, -7.44964, -8.69291, -7.10634, -6.47969, -5.23826, -3.07744, -5.24734, -2.7439, -3.36587, -0.0975146, 3.99892, 4.29177, 6.90759, 11.3663, 14.0484, 16.7999, 15.8696, 17.1829, 19.409, -22.8251, -18.0365, -21.6639, -20.1639, -20.0855, -17.0028, -13.9873, -10.5914, -2.36081, -1.59794, -0.95595, 1.39391, -1.91713, -0.67126, 2.17398, 4.51542, 6.16776, 8.89104, 7.13684, 8.74029, 7.98343, 6.9528, 9.47768, 13.053, 16.32, 16.6483, 12.2561, 11.09, 11.1578, 7.9011, 1.56417, 0.952778, -0.525415, 6.3491, 5.85461, 6.38653, 7.08507, -2.7209, -0.732682, -3.18509, -3.23464, -3.80668, -2.38735, -3.72784, -2.08425, -2.41059, -2.00907, 1.57516, -0.838339, -2.05349, -4.15105, -3.81556, 0.636382, 4.3931, 7.28902, 6.55808, -0.541001, -3.13747, -5.41883, -1.86375, 10.3522, 7.27468, 10.5795, 5.03712, 7.66638, 6.64748, 8.20366, 2.99955, 2.9793, 9.60809, 6.02631, 4.8051, 3.91947, 0.312858, 3.94963, 3.14871, -2.29213, -1.18579, -1.70611, -0.278901, -3.95787, 1.32494, -5.02126, -8.50855, -14.2159, -14.9927, -14.7038, -7.29035, -12.3887, -8.29288, 6.17994, -1.47897, 0.717419, -3.84712, 1.10075, 2.24114, 0.854968, 1.11698, -2.69481, -5.28131, -5.62238, -5.05206, -3.3784, -3.53418, -3.48212, -3.48139, -3.32223, -2.5227, -3.93786, 0.0858388, 1.51865, 4.04732, -1.86996, 0.286764, 4.84528, 0.810842, 11.9029, 2.48967, 7.76576, 3.54128, 33.619, 29.4821, 13.987, 3.16999, -5.60921, 10.799, 20.2805, 16.7322, 18.0847, 16.668, 17.0931, 17.8312, 16.4048, 6.49656, -0.288769, -4.33039, -5.48652, -8.42605, -17.6429, -21.0615, -23.2421, -32.8374, -16.8347, -28.6013, -19.6376, -14.5638, -8.37174, 11.5481, -3.35388, -21.9085, -16.6981, -10.9586, -3.17071, 49.597, 59.6432, 29.1191, 13.6584, 31.9627, 42.0119, 56.5527, 38.0709, 25.7581, 23.4572, 41.6777, 30.2128, 20.4458, 8.74894, 0.379038, -2.29211, -4.18535, -10.1862, -17.2594, -37.0715, -35.2946, -38.0883, -46.3618, -47.5747, -67.1881, -62.0327, -72.9332, 11.617, 9.8157, 10.1036, 14.7781, 4.52084, 3.63416, -0.879276, 0.701329, 0.681071, -1.4137, -4.3872, -5.97453, -7.00086, -12.5752, -9.55376, -8.69538, -7.55316, -7.75529, -5.29421, -4.38064, 0.41313, 0.263905, -1.13312, 3.35914, 0.827981, 4.21379, 0.602726, -3.12763, 11.9375, 2.25396, 0.636958, 0.842509, 5.13043, 3.21342, 2.50198, 8.97626, 0.671288, 5.10107, 4.69093, 4.91145, 3.12121, 2.38471, 3.25837, -0.512697, 0.807134, 0.614683, -0.243101, 3.03266, 0.132796, -4.04681, -1.6359, -3.94959, -1.33319, -1.85767, -2.15845, -9.00963, -4.82937, -11.4477, -4.69045, -4.31327, 16.2639, 14.0203, 8.77434, -0.873453, -0.8696, 0.301369, 2.28793, 0.64312, 0.848276, -7.29567, -7.2826, -6.84452, -4.84378, -7.75721, -8.24916, -6.83148, -7.58927, -4.65751, -4.1642, -4.22686, -4.08207, 3.4057, 1.46115, 0.246792, -2.72506, -1.8188, -3.36726, 13.5729, 13.6047, 8.04803, -4.21537, -1.29969, -2.1033, -6.40172, -10.1809, -7.84053, -7.90129, -6.10043, -4.84445, -5.3731, -2.08029, -3.93539, 1.64675, 6.18415, 3.65316, 3.9793, 4.83846, 8.38034, 9.3499, 11.1195, 7.4219, 8.70801, 4.83123, 0.598279, -4.44816, -1.59458, 1.90944, -5.93951, 12.2041, -10.5658, 3.33252, 5.13807, 8.426, 6.68357, 7.43825, 4.64806, 4.4466, 2.25593, 1.70344, -3.9998, -6.14438, -7.76559, -8.74957, -10.4799, -7.32788, -4.54574, -2.83576, -1.48024, -2.88527, 0.177473, 4.12723, 2.08317, 0.535311, 1.7972, 0.381329, -1.14113, 1.02053, 4.12221, -0.174437, -0.787131, -9.48997, -8.259, -6.27108, -6.5695, -5.1487, -9.81844, -7.89634, -7.09197, -3.75293, -3.28159, -2.3803, 0.473072, 0.946737, 3.14178, 5.61079, 8.78611, 8.89609, 13.0752, 14.6871, 18.7651, 17.5454, 9.4301, 3.08059, 4.34744, 4.01443, -2.63861, -4.18707, -9.47176, -13.587, -12.9557, 8.54429, 3.48703, 4.48343, 4.64947, 6.67026, 4.79186, 2.53957, -3.32218, -2.66805, -5.79671, -6.02931, -4.88275, -5.75826, -5.38863, -3.96198, -2.97984, 0.297913, -1.39058, -0.027844, -2.12605, 5.32887, 6.27263, 4.97394, 3.54265, -8.38851, -4.94135, -1.21522, -5.15239, 0.559233, 7.88849, 3.0623, 1.7848, -4.7155, 0.167483, 4.64758, 3.92867, -14.2984, -7.74487, -12.6482, -5.75824, -1.39249, -0.730649, 6.3769, 3.90398, 1.65438, -1.67195, -0.561967, 0.500365, 3.64782, 0.827505, -3.67522, 2.72804, 0.791959, 0.581112, -2.79095, 13.4391, 3.50239, -8.39427, 8.07975, 4.75859, -24.619, -21.2896, -23.3271, -22.3611, -20.3725, -17.6982, -9.70136, -7.02758, 1.14535, -1.20025, 2.79938, 4.64594, 3.84502, 6.74854, 7.49213, 12.6199, 8.51131, 9.54142, 6.31097, 8.39913, 7.43545, 6.57776, 2.41978, 5.06472, 8.06063, 4.80263, 8.65583, 9.32197, 9.57449, 13.6244, 0.186818, -1.65515, -4.68417, -4.53176, -3.76861, -1.7621, 0.051725, -3.65424, -4.83379, -3.71162, -4.81881, -3.24849, -0.291767, -1.24755, -1.78702, 1.22384, 2.20676, 0.75711, 1.91985, -0.219058, 0.842678, 2.26288, -0.727335, 4.70708, 4.9844, 6.96855, 1.16265, 1.64758, 10.7439, 1.27564, -10.6722, -9.62949, -9.25004, -9.13317, -8.32932, -7.68727, -9.33109, -9.65234, -6.48789, -7.11654, -11.9339, -9.1873, -8.29669, -7.2847, -3.93264, -1.25732, 0.861136, 3.46748, 2.22174, 3.88965, 5.75139, 5.41911, 9.17291, 11.5687, 14.1036, 12.0845, 14.5174, 16.3005, 10.9344, 18.8893, -3.95127, -3.73725, 3.73373, -8.33597, -5.68976, -6.05949, -3.6626, -2.57704, -3.52105, -4.33462, -5.22652, -3.93079, -4.01477, -2.22819, -0.386258, 2.63989, 5.30917, 6.38845, 5.52577, 9.58852, 8.5079, 3.41797, 6.71909, 3.46919, 1.05994, 0.464348, 1.06341, -8.36013, 9.13395, -1.00561, -1.40727, -3.52899, -2.61565, -3.05643, -4.60175, -4.04606, -1.62211, -0.834689, -1.64482, -3.22265, -4.73149, -4.61882, -6.23668, -7.53316, -6.9811, -5.83967, -2.2772, -6.62851, -1.49634, -5.26066, -2.23632, 3.07871, 8.96454, 0.933444, 5.60229, 2.36599, 10.9785, 15.0988, 24.917, 8.48115, -8.72858, -9.23832, -17.4419, -8.91328, -13.5772, -10.2114, -4.04673, -12.7729, -14.2, -5.88632, 0.547199, 2.97681, 2.47258, 17.2794, 14.5129, 7.81361, 8.31512, 9.61464, 10.4588, 9.62835, 4.73926, 3.57971, 4.6928, -3.14882, -0.558071, 4.5329, -3.92217, 4.70326, 1.47604, 5.30239, -5.71311, -6.77367, -4.19422, -10.0621, -8.53114, -6.07546, -3.63456, -3.21491, -2.77587, -0.329938, 3.83746, 7.44166, 8.28991, 11.812, 10.9963, 8.30387, 6.96468, 3.14561, 4.0914, 0.959314, 4.25659, -2.24512, -0.603299, 4.21107, 0.827431, -0.584904, -6.82985, 0.436083, -7.56408, -6.44123, -7.14548, -8.36534, -7.46894, -16.1048, -3.88396, -0.118156, -0.836558, -3.66608, -6.8101, -14.8474, -14.7139, -10.2266, -11.7953, -13.1986, -14.3974, -12.7475, -9.88669, -11.3481, -0.644675, 2.49411, 4.72527, 5.99795, 11.116, 16.3353, 18.4922, 17.1545, 17.8705, 23.5416, 22.8108, 27.6675, -6.03915, -5.81666, -6.2118, -7.62881, -4.94025, 2.90015, -3.89284, -0.280007, 0.109659, -0.0444079, -4.61255, -3.23211, -1.20761, 2.22132, 6.00561, 3.46398, 2.69071, 1.10387, -2.26893, 1.06324, 3.71981, 3.27059, 2.57687, 1.81519, 2.489, 8.23762, 5.73668, 8.56728, -0.900449, -8.896, -4.95051, -4.39247, -2.97914, -5.91826, -4.06358, -0.407899, -0.268657, -0.576273, -4.91182, -7.232, -6.18671, -6.67404, -6.7919, -6.3359, -4.6262, -5.36782, -3.7256, -4.36162, -1.68194, -0.648113, 1.03884, 3.47267, 6.97895, 4.97988, 7.38261, 11.2769, 12.3352, 10.059, 12.825, 11.7513, -7.78545, 3.31163, 4.69108, -1.50899, 2.66263, 6.98257, 6.33028, 3.93465, -1.41949, 1.05185, 0.10231, 2.02345, 15.2141, 13.8108, 12.6205, 13.7974, 23.6651, 13.2222, 15.2393, 13.3291, -3.35646, -10.4617, -11.8808, -6.23772, -19.4858, -10.5694, -14.4499, -27.0871, -24.3682, -13.3778]
        @show y - X * coef
        @show sqrtw
        @show id.refs
        @show time.refs
        fit!(Val{:levenberg_marquardt}, fp, fs; maxiter = 100, tol = 1e-3, lambda = lambda)

        fs = InteractiveFixedEffectsSolution(coef, fs.idpool, fs.timepool)
        fp = InteractiveFixedEffectsModel(y, sqrtw, X, id.refs, time.refs, m.rank)
        ym = copy(y)
        Xm = copy(X)

        while true 
            # estimate the model
           (fs, iterations, converged) = 
                fit!(Val{method}, fp, fs; maxiter = maxiter, tol = tol, lambda = lambda)
            # check that I obtain the same coefficient if I solve
            # y ~ x + γ1 x factors + γ2 x loadings
            # if not, this means fit! ended up on a a local minimum. 
            # restart with randomized coefficients, factors, loadings
            newpfe = FixedEffectModels.FixedEffectMatrix(getfactors(fp, fs), sqrtw, Val{:lsmr})
            FixedEffectModels.solve_residuals!(ym, newpfe, tol = tol, maxiter = maxiter)
            FixedEffectModels.solve_residuals!(Xm, newpfe, tol = tol, maxiter = maxiter)
            ydiff = Xm * (fs.b - Xm \ ym)
            if iterations >= maxiter || norm(ydiff)  <= 0.01 * norm(y)
                break
            end
            @info "Algorithm ended up on a local minimum. Restarting from a new, random, x0."
            map!(x -> randn() * x, fs, fs)
            copyto!(ym, y)
            copyto!(Xm, X)
        end
    end

    ##############################################################################
    ##
    ## Compute residuals
    ##
    ##############################################################################

    # compute residuals
    fp = FactorModel(copy(y), sqrtw, id.refs, time.refs, m.rank)
    if has_regressors
        gemm!('N', 'N', -1.0, X, fs.b, 1.0, fp.y)
    end
    subtract_factor!(fp, fs)
    fp.y .= fp.y ./ sqrtw
    residuals = fp.y
    ##############################################################################
    ##
    ## Compute errors
    ##
    ##############################################################################
    if !has_regressors
        rss = sum(abs2, residuals)
    else
        residualsm = ym .- Xm * fs.b
        crossxm = cholesky!(Symmetric(Xm' * Xm))
        ## compute the right degree of freedom
        df_absorb_fe = 0
        if has_absorb 
            for fe in fes
                df_absorb_fe += length(unique(fe.refs))
            end
        end
        dof_residual = max(size(X, 1) - size(X, 2) - df_absorb_fe, 1)

        ## estimate vcov matrix
        vcov_data = VcovData(Xm, crossxm, residualsm, dof_residual)
        matrix_vcov = vcov!(vcov_method_data, vcov_data)
        # compute various r2
        nobs = sum(esample)
        rss = sum(abs2, residualsm)
        tss = compute_tss(ym, has_intercept || has_absorb_intercept, sqrtw)
        r2_within = 1 - rss / tss 

        rss = sum(abs2, residuals)
        tss = compute_tss(oldy, has_intercept || has_absorb_intercept, sqrtw)
        r2 = 1 - rss / tss 
        r2_a = 1 - rss / tss * (nobs - has_intercept) / dof_residual 
    end

    ##############################################################################
    ##
    ## Save factors and loadings in a dataframe
    ##
    ##############################################################################

    if !save 
        augmentdf = DataFrame()
    else
        augmentdf = DataFrame(fp, fs, esample)
        # save residuals in a dataframe
        if all(esample)
            augmentdf[!, :residuals] = residuals
        else
            augmentdf[!, :residuals] =  Vector{Union{Float64, Missing}}(missing, size(augmentdf, 1))
            augmentdf[esample, :residuals] = residuals
        end

        # save fixed effects in a dataframe
        if has_absorb
            # residual before demeaning
             oldresiduals = convert(Vector{Float64}, response(formula_schema, subdf))
             oldresiduals .= oldresiduals .* sqrtw
             oldX = convert(Matrix{Float64}, modelmatrix(formula_schema, subdf))
             oldX .= oldX .* sqrtw
            if has_regressors
                gemm!('N', 'N', -1.0, oldX, coef, 1.0, oldresiduals)
            end
            fp = FactorModel(oldresiduals, sqrtw, id.refs, time.refs, m.rank)
            subtract_factor!(fp, fs)
            axpy!(-1.0, residuals, oldresiduals)
            # get fixed effect
            newfes, b, c = FixedEffectModels.solve_coefficients!(oldresiduals, pfe; tol = tol, maxiter = maxiter)
            for j in 1:length(fes)
                augmentdf[!, ids[j]] = Vector{Union{Float64, Missing}}(missing, length(esample))
                augmentdf[esample, ids[j]] = newfes[j]
            end
        end
    end


    if !has_regressors
        return FactorResult(esample, augmentdf, rss, iterations, converged)
    else
        return InteractiveFixedEffectsResult(fs.b, matrix_vcov, esample, augmentdf, 
            coef_names, yname, f, nobs, dof_residual, r2, r2_a, r2_within, 
            rss, sum(iterations), all(converged))
    end
end



function evaluate_subset(df, ex::Expr)
    if ex.head == :call
        return Expr(ex.head, ex.args[1], (evaluate_subset(df, ex.args[i]) for i in 2:length(ex.args))...)
    else
        return Expr(ex.head, (evaluate_subset(df, ex.args[i]) for i in 1:length(ex.args))...)
    end
end
evaluate_subset(df, ex::Symbol) = df[!, ex]
evaluate_subset(df, ex)  = ex